{"version":3,"sources":["Board/Board.js","App/App.js","serviceWorker.js","index.js"],"names":["Board","state","clicked","displayFlag","counter","imageDisplay","_this","react_default","a","createElement","src","alt","key","props","id","handleMouseDown","e","document","oncontextmenu","window","event","console","log","which","showNumber","setState","Object","objectSpread","Xcounter","edge","Math","sqrt","reduxState","reducer","board","length","keys","minX","maxX","minY","floor","maxY","x","y","this","_this2","className","onMouseDown","Component","connect","App","size","squareArray","handleChange","Number","target","value","boardMaker","number","placeHolderArray","i","push","j","random","dispatch","type","payload","onChange","placeholder","onClick","style","width","map","space","index","src_Board_Board","Boolean","location","hostname","match","storeInstance","createStore","combineReducers","arguments","undefined","action","assign","applyMiddleware","logger","ReactDOM","render","es","store","src_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6e7243c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css'\nimport { connect } from 'react-redux';\n\n\nconst mapReduxStateToProps = (reduxState) => ({reduxState})\n\nclass Board extends Component {\n  state = {\n    clicked: false,\n    displayFlag: false,\n    counter: 0,\n  }\n\n  componentWillReceiveProps() {\n    this.setState({\n      clicked: false,\n      displayFlag: false,\n      counter: 0,\n    })\n  }\n  \n\n  imageDisplay= () => {\n    if(!this.state.clicked && !this.state.displayFlag){\n      return <img key={this.props.id} src='images/Frog-1.png' alt='Not Clicked'/>\n    } else if(this.state.displayFlag){\n      return <img src='images/Yellow.png' alt='None' />\n    } else {\n      return this.state.counter;\n    }\n  }\n\n  handleMouseDown =  e => {\n    document.oncontextmenu = function() {\n      return false;\n  }\n    e = e || window.event;\n    //console.log(e.which)\n    console.log(this.state)\n    switch(e.which) {\n      case 1 : this.showNumber(); break;\n      case 2 : break;\n      case 3 : this.displayFlag(); return false;\n      default: break;  \n    }\n  }\n\n  displayFlag= () => {\n    console.log('running')\n    this.setState({...this.state, displayFlag : !this.state.displayFlag })\n    return this.state.displayFlag;\n  }\n\n  showNumber= () => {\n    console.log('run')\n    let Xcounter = 0;\n    let edge = Math.sqrt(this.props.reduxState.reducer.board.length)\n    console.log(edge)\n    let keys = this.props.keys\n    let board = this.props.reduxState.reducer.board\n    let minX = keys%edge === 0 ? 0 : -1;\n    let maxX = keys%edge === (edge-1) ? 0 : 1;\n    let minY = Math.floor(keys/edge) == 0 ? 0 : -1;\n    let maxY = Math.floor(keys/edge) == (edge-1) ? 0 : 1;\n    for(let x = minX; x <= maxX; x++){\n      for(let y = minY; y<=maxY; y++){\n        if(board[keys+x+(y*edge)]=== 'X'){\n          Xcounter++\n          \n        }\n      }\n    }\n    if(this.props.id === 'X'){\n      this.setState({...this.state, clicked: true, counter: 'X'})\n      return this.state.counter;\n    }\n    this.setState({...this.state, clicked: true, counter: Xcounter})\n    return this.state.counter;\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n          <div onMouseDown={()=>this.handleMouseDown()} className='square'>{this.imageDisplay()}</div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStateToProps)(Board);","import React, { Component } from 'react';\nimport './App.css';\nimport Board from '../Board/Board'\nimport {connect} from 'react-redux'\n\n\nconst mapReduxStateToProps= (reduxState) => ({\n  reduxState\n})\n\nclass App extends Component {\n  state = {\n    size : '8',\n    squareArray : []\n  }\n\n  handleChange =(event) => {\n    this.setState({\n      ...this.state,\n      size : Number(event.target.value)\n    })\n    console.log(this.state)\n  }\n\n  //This function makes a an array of numbers with 1/4 'X's and 3/4 'O's\n  boardMaker = (number) => {\n    this.setState({squareArray:[]});\n    let size = number*number;\n    let placeHolderArray = []\n\n    for(let i=0; i<size; i++){\n      placeHolderArray.push('O')\n    }\n    for(let j=0; j<size/4;j++){\n      placeHolderArray[Math.floor(Math.random()*size)] = 'X'\n    }\n\n    this.setState({squareArray: placeHolderArray})\n    console.log(placeHolderArray)\n    console.log(this.state.squareArray);\n    this.props.dispatch({type:'MAKE_BOARD', payload: placeHolderArray})\n    this.props.dispatch({type: 'SET_SIZE', payload : this.state.size})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input onChange={this.handleChange} placeholder='Size'/>\n          <button onClick={()=>this.boardMaker(this.state.size)}>Make Board</button>\n\n          <div className='board' style={{width: 40*this.props.reduxState.size.size}}>\n\n            {/* {this.state.squareArray.map(space => {\n              return(\n                <div className='square'>{space}</div>\n              )\n            })} */}\n            {/* {JSON.stringify(this.props.reduxState)} */}\n            {this.props.reduxState.reducer.board.map((space,index) => \n              <Board keys={index} id={space}/>\n            )\n            }\n          </div>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\n\nconst reducer = (state={board : []}, action) => {\n    switch (action.type) {\n      case 'MAKE_BOARD':\n      return Object.assign({}, state, {\n        board: action.payload\n      })\n      default:\n        return state  \n    }\n}\n\nconst size = (state = {size : ''}, action) => {\n    switch (action.type) {\n        case 'SET_SIZE' :\n          return Object.assign({}, state, {\n              size: action.payload\n          })\n          //return { size : action.payload}\n        default:\n          return state  \n    }\n}\n\nconst storeInstance = createStore(\n    combineReducers({\n        reducer,\n        size\n    }),\n    applyMiddleware(logger)\n)\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}